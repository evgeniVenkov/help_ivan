import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from dotenv import load_dotenv
from GPTClient import GPTClient
from datetime import datetime



gpt_client = GPTClient()
# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏ –∏ —Å–æ–±—ã—Ç–∏—è)
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()



# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_handler(message: Message):
    user_name = message.from_user.first_name or "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –∑–ª–æ–¥–µ—è!"
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ª–µ–∫–∞—Ä—å –¥–ª—è {message.from_user.first_name} –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ —É —Ç–µ–±—è —Å–ª—É—á–∏–ª–æ—Å—å?")
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def help_handler(message: Message):
    await message.answer("–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –Ω–µ–¥—É–≥")


@dp.message()
async def echo_message(message: Message):
    user_name = message.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
    user_text = message.text

    mess_text = f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.username} | {message.text} "

    print(mess_text)

    response = gpt_client.chat(message.text)
    with open(".logi", "a", encoding="utf-8") as log_file:
        log_file.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n")
        log_file.write(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {user_text}\n")
        log_file.write(f"–û—Ç–≤–µ—Ç: {response}\n")
        log_file.write("------------------------\n")

    await message.answer(response)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
